---
title: "eds223-raster-manipulation"
author: "Richrd Montes Lemus"
format: html
editor: visual
---

```{r, message = false}
library(tidyverse)
library(spData)
library(spDataLarge)
library(sf)
library(stars)
library(terra)
```

```{r}
dem <- terra::rast(system.file("raster/dem.tif", package = "spDataLarge"))
landsat <- terra::rast(system.file("raster/landsat.tif", package = "spDataLarge"))
srtm <- terra::rast(system.file("raster/srtm.tif", package = "spDataLarge"))
```

```{r}
hist(dem, 
     main = "Digital Elevation Model Distribution",
     xlab = "Value")
```

```{r}
boxplot(dem, 
        main = "Digital Elevation Model Distribution", 
        ylab = "Value")
```
```{r}
zonal(dem, reclassified, fun = "mean")
```

```{r}
# Define a reclassification matrix
rcl <- matrix(c(-Inf, 300, 0, # values -Inf to 300 = 0
                300, 500, 1,  # values 300 to 500 = 1
                500, Inf, 2), # values 500 to Inf = 2
              ncol = 3, byrow = TRUE)

# Apply the matrix to reclassify the raster, making all cells 0 or 1 or 2
dem_rcl <- terra::classify(dem, rcl = rcl)

# Assign labels to the numerical categories
levels(dem_rcl) <- tibble::tibble(id = 0:2, 
                                  cats = c("low", "medium", "high"))

# Calculate mean elevation for each category using original DEM values
elevation_mean <- terra::zonal(dem, dem_rcl, fun = "mean")
elevation_mean
```

```{r}
# Obtain scale factor and offset 
scale_factor <- 0.0001
offset <- 0
scale_function <- function(x) {
  x * scale_factor + offset
}

landsat_scaled <- terra::app(landsat, fun = scale_function)
```

```{r}
ndwi_fun <- function(green, nir){
    (green - nir)/(green + nir)
}

ndvi_fun <- function(nir, red){
  (nir - red)/(nir + red)
}
```

```{r}
ndwi_rast <- terra::lapp(landsat_scaled[[c(2, 4)]],
                         fun = ndwi_fun)

ndvi_rast <- terra::lapp(landsat_scaled[[c(4, 3)]],
                         fun = ndvi_fun)
```

```{r}
plot(ndwi_rast,
     main = "Zion National Park NDWI")
```
```{r}
plot(ndvi_rast,
     main = "Zion National Park NDVI")
```
```{r}
combine <- c(ndvi_rast, ndwi_rast) # Stack rasters

plot(combine, main = c("NDVI", "NDWI")) # Plot
```
```{r}
# Calculate correlation between raster layers 
terra::layerCor(combine, fun = cor)
```

```{r}
plot(srtm)
```

```{r}
rast_template <- terra::rast(terra::ext(srtm), res = 0.01) # Create empty template
```

```{r}
srtm_resampl1 <- terra::resample(srtm, y = rast_template, method = "bilinear")
srtm_resampl2 <- terra::resample(srtm, y = rast_template, method = "near")
srtm_resampl3 <- terra::resample(srtm, y = rast_template, method = "cubic")
srtm_resampl4 <- terra::resample(srtm, y = rast_template, method = "cubicspline")
srtm_resampl5 <- terra::resample(srtm, y = rast_template, method = "lanczos")
```

```{r}
srtm_resampl_all <- c(srtm_resampl1, srtm_resampl2, srtm_resampl3, srtm_resampl4, srtm_resampl5)
labs <- c("Bilinear", "Near", "Cubic", "Cubic Spline", "Lanczos")

plot(srtm_resampl_all, main = labs)
```

